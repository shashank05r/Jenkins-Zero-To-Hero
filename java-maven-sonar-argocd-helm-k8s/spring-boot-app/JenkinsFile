pipeline {
  agent {
    docker {
      image 'shashankp05/shashank:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://35.183.128.172:9000/"
    DOCKER_IMAGE = "shashankp05/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "shashank05r"
  }

  stages {
    stage('Checkout') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s') {
          git branch: 'main', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
        }
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s') {
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
              echo "üìç Checking for Git repository..."
              ls -a
              pwd

              if [ ! -d ".git" ]; then
                echo "‚ùå Git repository not found. Aborting."
                exit 1
              fi

              git config user.email "p.shashank05r@gmail.com"
              git config user.name "shashank05r"

              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml

              if ! git diff --quiet spring-boot-app-manifests/deployment.yml; then
                echo "‚úÖ Committing updated deployment file..."
                git add spring-boot-app-manifests/deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
              else
                echo "üö´ No changes detected. Skipping commit."
              fi
            '''
          }
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Pipeline completed successfully!"
    }
    failure {
      echo "‚ùå Pipeline failed. Please check logs above."
    }
  }
}
